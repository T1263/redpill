import { app, BrowserWindow } from 'electron';
const sudo = require('sudo-prompt');
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const electronIpcMain = require('electron').ipcMain;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}
process.env['ELECTRON_DISABLE_SECURITY_WARNINGS'] = 'true';
const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 600,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      disableHtmlFullscreenWindowResize: true,
    },
  });

  mainWindow.removeMenu();
  mainWindow.setMaximizable(false);

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

electronIpcMain.handle('addDomain', async (_, domain: string) => {
  var options = {
    name: 'Redpill',
  };

  sudo.exec(
    `${process.resourcesPath}\\extraResources\\hostile.exe set 127.0.0.1 ${domain}`,
    options,
    function (error: any, stdout: any, stderr: any) {
      if (error) throw error;
      console.log('stdout: ' + stdout);
    }
  );
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
